{{Infobox software
| logo                   = [[Image:Hibernate.png]]
| name                   = Hibernate ORM
| developer              = [[Red Hat]]
| status                 = Active
| latest release version = 4.3.7<ref name="hibernateHistory">https://hibernate.atlassian.net/browse/HHH#selectedTab=com.atlassian.jira.plugin.system.project%3Aversions-panel</ref>
| latest release date    = {{release date|2014|10|30}}<ref name="hibernateHistory"/>
| latest preview version = 
| latest preview date    = 
| operating system       = [[Cross-platform]] ([[JVM]])
| platform               = [[Java Virtual Machine]]
| programming language   = [[Java (programming language)|Java]]
| genre                  = [[Object-relational mapping]]
| license                = [[GNU Lesser General Public License]]
| website                = {{url|http://hibernate.org}}
}}

'''Hibernate ORM''' (Hibernate in short) is an [[object-relational mapping]] library for the [[Java (programming language)|Java]] language, providing a [[Software framework|framework]] for mapping an [[Object-oriented programming|object-oriented]] [[domain model]] to a traditional [[relational database]].  Hibernate solves [[object-relational impedance mismatch]] problems by replacing direct [[Persistence (computer science)|persistence]]-related database accesses with high-level object handling functions.

Hibernate is a [[free software]] that is distributed under the [[GNU Lesser General Public License]].

Hibernate's primary feature is mapping from Java classes to [[Table (database)|database tables]] (and from Java data types to [[SQL]] data types). Hibernate also provides data query and retrieval facilities.  It generates SQL calls and relieves the developer from manual result set handling and object conversion. Applications using Hibernate are portable to supported SQL databases with little performance overhead {{Citation needed|date=September 2012}}.

==Mapping==
Mapping Java classes to database tables is accomplished through the configuration of an [[XML]] file or by using [[Java annotation|Java Annotations]]. When using an XML file, Hibernate can [[Program synthesis|generate]] skeleton [[source code]] for the persistence classes. This is unnecessary when annotations are used. Hibernate can use the XML file or the annotations to maintain the [[database schema]].

Facilities to arrange [[Point-to-multipoint communication|one-to-many]] and [[Many-to-many (data model)|many-to-many]] relationships between classes are provided. In addition to managing associations between objects, Hibernate can also manage [[Reflexive relation|reflexive]] associations where an object has a one-to-many relationship with other instances of its own [[data type|type]].

Hibernate supports the mapping of custom value types. This makes the following scenarios possible:
* Overriding the default SQL type that Hibernate chooses when mapping a column to a property.
* Mapping Java [[Enumerated type|Enum]] to columns as if they were regular properties.
* Mapping a single property to multiple columns.

'''Definition:'''
Objects in a front-end application follow [[object-oriented programming|OOP]] principles, while objects in the back-end follow [[database normalization]] principles, resulting in different representation requirements. This problem is called "[[object-relational impedance mismatch]]". Mapping is a way of resolving the impedance mismatch problem.

Mapping tells the ORM tool which java class object to store in which database table.

==Hibernate Query Language (HQL)==
Hibernate provides an [[SQL]] inspired language called [[Hibernate Query Language]] (HQL) which allows SQL-like queries to be written against Hibernate's data objects. ''Criteria Queries'' are provided as an [[Object-oriented programming|object-oriented]] alternative to HQL. Criteria Query is used to modify the objects and provide the restriction for the objects.

==Persistence==
Hibernate provides transparent persistence for [[Plain Old Java Object]]s (POJOs). The only strict requirement for a persistent class is a [[Nullary constructor|no-argument constructor]], not necessarily ''public''. Proper behavior in some applications also requires special attention to the ''equals()'' and ''hashCode()'' methods.<ref>{{cite web|title=Equals and HashCode|url=https://community.jboss.org/wiki/EqualsAndHashCode|publisher=JBoss Community}}</ref>

Collections of data objects are typically stored in Java collection objects such as Set and List. [[Generics in Java|Java generics]], introduced in Java 5, are supported. Hibernate can be configured to [[lazy load]] associated collections. Lazy loading is the default as of Hibernate 3.

Related objects can be configured to ''[[Propagation constraint|cascade]]'' operations from one to the other. For example, a parent Album object can be configured to cascade its save and/or delete operation to its child Track objects. This can reduce development time and ensure [[referential integrity]]. A ''dirty checking'' feature avoids unnecessary database write actions by performing SQL updates only on the modified fields of persistent objects.

==Integration==
Hibernate can be used both in standalone [[Java (programming language)|Java]] applications and in [[Java EE]] applications using [[Java Servlet|servlets]], [[EJB]] session beans, and [[JBI]] service components.  It can also be included as a feature in other programming languages.  For example, [[Adobe Systems|Adobe]] integrated Hibernate into version 9 of [[ColdFusion]] (which runs on J2EE app servers) with an abstraction layer of new functions and syntax added into [[CFML]].

==Entities and components==
In Hibernate [[jargon]], an ''entity'' is a stand-alone object in Hibernate's [[Persistence (computer science)|persistent]] mechanism which can be manipulated independently of other objects. In contrast, a ''component'' is subordinate to an entity and can be manipulated only with respect to that entity. For example, an Album object may represent an entity but the Tracks object associated with the Album objects would represent a ''component'' of the Album entity if it is assumed that Tracks can only be saved or retrieved from the database through the Album object. Unlike J2EE, it can switch databases.

== History ==

Hibernate was started in 2001 by [[Gavin King (Developer)|Gavin King]] with colleagues from Cirrus Technologies as an alternative to using EJB2-style entity beans. Its original goal was to offer better persistence capabilities than offered by EJB2 by simplifying the complexities and supplementing missing features.

In early 2003, the Hibernate development team began Hibernate2 releases, which offered many significant improvements over the first release.

[[JBoss (company)|JBoss, Inc.]] (now part of [[Red Hat]]) later hired the lead Hibernate developers in order to further its development.

In 2005, Hibernate version 3.0 was released. Key features included a new Interceptor/Callback architecture, user defined filters, and JDK 5.0 [[Java annotation|Annotations]] (Java's [[metadata]] feature). {{As of | 2010}}, Hibernate 3 (version 3.5.0 and up) was a certified implementation of the [[Java Persistence API#JPA 2.0|Java Persistence API 2.0]] specification via a wrapper for the Core module which provides conformity with the [http://jcp.org/en/jsr/detail?id=317 JSR 317] standard.<ref>{{cite web|title=Hibernate 3.5.0-Final release|url=http://in.relation.to/Bloggers/Hibernate350FinalRelease|publisher=In Relation To...}}</ref>

In Dec 2011, Hibernate Core 4.0.0 Final was released. This includes new features such as multi-tenancy support, introduction of ServiceRegistry (a major change in how Hibernate builds and manages "services"), better Session opening from SessionFactory, improved integration via ''org.hibernate.integrator.spi.Integrator'' and auto discovery, [[Internationalization and localization|internationalization]] support and message codes in logging, and a clearer split between API, SPI and implementation classes.<ref>http://www.hibernate.org/orm/downloads/</ref>

In Dec 2012, Hibernate ORM 4.1.9 Final was released.<ref>http://in.relation.to/23792.lace</ref>

In March 2013, Hibernate ORM 4.2 Final was released.<ref>http://grepcode.com/snapshot/repository.jboss.org/nexus/content/repositories/releases/org.hibernate/hibernate-core/4.2.0.Final</ref>

In Dec 2013, Hibernate ORM 4.3.0 Final was released.<ref>http://grepcode.com/snapshot/repository.jboss.org/nexus/content/repositories/releases/org.hibernate/hibernate-core/4.3.0.Final</ref> It features [[Java Persistence API#JPA 2.1|Java Persistence API 2.1]].<ref>http://hibernate.org/orm/downloads/</ref>

In 2012, development was started on Hibernate 5  but it is not realised yet. It will feature redesigned metamodel (Complete replacement for the current org.hibernate.mapping code), Query parser (Improved query parser based on [[Antlr]] 3/4), Multi-tenancy improvements (Discriminator-based multi-tenancy), Follow-on fetches (Two-phase loading via LoadPlans/EntityGraphs) and [[OSGi]] improvements (Support dynamic runtimes, multiple tenancy, multiple persistenceunits, and more) <ref>http://hibernate.org/orm/roadmap/</ref>

== Application programming interface ==

The Hibernate API is provided in the [[Java package]] [http://docs.jboss.org/hibernate/stable/core/javadocs/index.html?overview-summary.html  org.hibernate].

=== [http://docs.jboss.org/hibernate/stable/core/javadocs/org/hibernate/SessionFactory.html org.hibernate.SessionFactory] interface ===

=== [http://docs.jboss.org/hibernate/stable/core/javadocs/org/hibernate/Session.html org.hibernate.Session] interface ===

Represents a Hibernate session, i.e., the main point of the manipulation performed on the database entities. The latter activities include (among the other things) managing the persistence state ([[Transient (computer programming)|transient]], [[Java Persistence API|persisted]], detached{{Clarify|date=June 2011}}) of the objects, fetching the persisted ones from the database and the management of the transaction demarcation{{Clarify|date=June 2011}}.

A session is intended to last as long as the logical transaction on the database. Due to the latter feature, Session implementations are not expected to be thread safe nor to be used by multiple clients.

== Software components ==
The Hibernate software includes the following components:<ref>{{cite web|title=Hibernate: Relational Persistence for Java and .NET|url=http://www.hibernate.org/|publisher=JBoss Community}}</ref>
* Hibernate ORM (known as Hibernate Core before release 4.1<ref>{{cite web|title=Hibernate ORM 4.1.0 Release|url=http://in.relation.to/Bloggers/HibernateORM410Release|publisher=JBoss Community}}</ref>) – the base software for an object-relational mapping solution for Java environments<ref>{{cite web|title=HIBERNATE - Relational Persistence for Idiomatic Java|url=http://docs.jboss.org/hibernate/orm/4.1/manual/en-US/html/|publisher=JBoss Community}}</ref>
* Hibernate Annotations (merged into Hibernate Core/ORM since version 3.6<ref>{{cite web|title=No more hibernate-annotations module|url=http://in.relation.to/Bloggers/NoMoreHibernateannotationsModule|publisher=JBoss Community}}</ref>) – metadata that governs the transformation of data between the object-oriented model and the relational database model according to the JSR 317 [[Java Persistence API]] (JPA 2)<ref>{{cite web|title=Hibernate Annotations|url=http://docs.jboss.org/hibernate/annotations/3.5/reference/en/html_single/|publisher=JBoss Community}}</ref>
* Hibernate EntityManager – together with Hibernate Annotations, a wrapper that implements a JSR 317 [[Java Persistence API]] (JPA 2) persistence solution on top of Hibernate Core<ref>{{cite web|title=Hibernate EntityManager|url=http://docs.jboss.org/hibernate/entitymanager/3.6/reference/en/html_single/|publisher=JBoss Community}}</ref>
* Hibernate Envers – auditing and versioning of persistent classes<ref>{{cite web|title=Hibernate Envers – Easy Entity Auditing|url=http://docs.jboss.org/hibernate/envers/3.6/reference/en-US/html_single/|publisher=JBoss Community}}</ref>
* Hibernate OGM (Object/Grid Mapper) – an extension to store data in a [[NoSQL]] store<ref>{{cite web|title=Hibernate OGM|url=http://hibernate.org/ogm/|publisher=JBoss Community}}</ref>
* Hibernate Shards – [[Shard (database architecture)|horizontal partitioning]] for multiple relational databases<ref>{{cite web|title=Hibernate Shards|url=http://www.hibernate.org/subprojects/shards.html|publisher=JBoss Community}}</ref>
** While Hibernate Shards is not compatible with 4.x releases of Hibernate Core, some of the Shards capability was integrated into Core in the 4.0 release
* Hibernate Search – integrates the full text library functionality from [[Apache Lucene]] in the Hibernate and JPA model<ref>{{cite web|title=Hibernate Search|url=http://www.hibernate.org/search/|publisher=JBoss Community}}</ref>
* Hibernate Tools – a set of tools implemented as a suite of [[Eclipse (software)|Eclipse]] plugins and [[Ant (software)|Ant]] tasks included in [[JBoss Developer Studio]]<ref>{{cite web|title=Hibernate Tools for Eclipse and Ant|url=http://www.hibernate.org/tools/|publisher=JBoss Community}}</ref>
* Hibernate Validator – the [[reference implementation]] of JSR 303 [[Bean Validation]]<ref>{{cite web|title=Hibernate Validator|url=http://www.hibernate.org/validator/|publisher=JBoss Community}}</ref>
* Hibernate Metamodel Generator – an annotation processor that creates JSR 317 [[Java Persistence API]] (JPA 2) static metamodel classes using the JSR 269 [[Metadata facility for Java|Pluggable Annotation Processing API]]<ref>{{cite web|title=Hibernate Metamodel Generator|url=http://www.hibernate.org/subprojects/jpamodelgen.html|publisher=JBoss Community}}</ref>
* [[NHibernate]] – an object-relational mapping solution for the [[.NET Framework]]<ref>{{cite web|title=NHibernate|url=http://nhforge.org/|publisher=NHibernate Forge}}</ref>

== See also ==
{{Portal|Free software|Java}}
* [[List of JBoss software]]
* [[List of object-relational mapping software]]
* [[NHibernate]]
* [[Serialization]]
* [[Service Data Object]]

==References==
{{reflist|35em}}

==Bibliography==
{{Refbegin|35em}}
*{{citation
| first1    = Jeff
| last1     = Linwood
| first2    = Dave
| last2     = Minter
| date      = May 28, 2010
| title     = Beginning Hibernate
| edition   = Second
| publisher = [[Apress]]
| pages     = 400
| isbn      = 1-4302-2850-4
| url       = http://www.apress.com/book/view/9781430228509
}}
*{{citation
| first1    = Emmanuel
| last1     = Bernard
| first2    = John
| last2     = Griffin
| date      = December 30, 2008
| title     = Hibernate Search in Action
| edition   = First
| publisher = [[Manning Publications]]
| pages     = 488
| isbn      = 1-933988-64-9
| url       =
}}
*{{citation
| first1    = James
| last1     = Elliott
| first2    = Tim
| last2     = O'Brien
| date      = April 22, 2008
| title     = Harnessing Hibernate
| edition   = First
| publisher = [[O'Reilly Media]]
| pages     = 380
| isbn      = 0-596-51772-6
| url       = http://oreilly.com/catalog/9780596517724/
}}
*{{citation
| first1    = Gavin
| last1     = King
| first2    = Bauer
| last2     = Christian
| date      = November 24, 2006
| title     = Java Persistence with Hibernate
| edition   = Second
| publisher = [[Manning Publications]]
| pages     = 880
| isbn      = 1-932394-88-5
| url       =
}}
*{{citation
| first1    = Jeff
| last1     = Linwood
| first2    = Dave
| last2     = Minter
| date      = August 25, 2006
| title     = Beginning Hibernate: From Novice to Professional
| edition   = Third
| publisher = [[Apress]]
| pages     = 360
| isbn      = 1-59059-693-5
| url       = http://www.apress.com/book/view/9781590596937
}}
*{{citation
| first1    = Dave
| last1     = Minter
| first2    = Jeff
| last2     = Linwood
| date      = June 27, 2005
| title     = Pro Hibernate 3
| edition   = First
| publisher = [[Apress]]
| pages     = 242
| isbn      = 1-59059-511-4
| url       = http://www.apress.com/book/view/1590595114
}}
*{{citation
| first     = Will
| last      = Iverson
| date      = December 2, 2004
| title     = Hibernate: A J2EE Developer's Guide
| edition   = First
| publisher = [[Addison Wesley]]
| pages     = 384
| isbn      = 0-321-26819-9
| url       =
}}
*{{citation
| first1    = Eric
| last1     = Pugh
| first2    = Joseph D.
| last2     = Gradecki
| date      = October 8, 2004
| title     = Professional Hibernate (Programmer to Programmer)
| edition   = First
| publisher = [[Wrox Press|Wrox]]
| pages     = 456
| isbn      = 0-7645-7677-1
| url       = http://p2p.wrox.com/book-professional-hibernate-148/
}}
*{{citation
| first1    = Gavin
| last1     = King
| first2    = Bauer
| last2     = Christian
| date      = August 1, 2004
| title     = Hibernate In Action
| edition   = Second
| publisher = [[Manning Publications]]
| pages     = 400
| isbn      = 1-932394-15-X
| url       =
}}
*{{citation
| first     = Elliott
| last      = James
| date      = May 10, 2004
| title     = Hibernate: A Developer's Notebook
| edition   = First
| publisher = [[O'Reilly Media]]
| pages     = 190
| isbn      = 0-596-00696-9
| url       = http://oreilly.com/catalog/9780596006969/
}}
{{Refend}}

==External links==
* {{Official website|http://www.hibernate.org}}
*[http://www.javafree.org/artigo/871462/Interview-with-Gavin-King-founder-of-Hibernate.html Interview with Gavin King, founder of Hibernate]
*[http://docs.jboss.org/hibernate/stable/core/manual/en-US/html/ Hibernate Reference Documentation]
*[http://dev.wavemaker.com/forums/?q=node/3232 Hibernate and HQL Query Tutorial]
*[http://code.google.com/p/scale4j/ scale4j is highly scalable domain oriented data-distributed platform for java built on top of hibernate]
*[http://lalit-bhatt.blogspot.in/p/hibernate.html Hibernate Tutorial]
* [http://torpedoquery.org TorpedoQuery - Type safe Hibernate query builder ]
* [http://java360.co.in/best-recommended-books-for-hibernate-framework/ Best Recommended books for Hibernate framework ]
===Further reading===
*[http://www.javatips.net/blog/2011/12/hibernate-tutorial Hibernate Tutorial]
*[http://www.javatips.net/blog/2011/12/hibernate-annotations-tutorial Hibernate Annotations Tutorial]
*[http://www.javatips.net/blog/2012/12/java-persistence-jpa-2-0-tutorial-with-hibernate Java Persistence (JPA 2.0) Tutorial With Hibernate]

{{Java Persistence API}}
{{Java (Sun)}}

[[Category:Object-relational mapping]]
[[Category:Java platform]]
[[Category:Java enterprise platform]]
[[Category:Red Hat]]
[[Category:Cross-platform software]]
[[Category:Persistence frameworks]]